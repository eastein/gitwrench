#!/usr/bin/env python

import sys
import os, os.path
import subprocess
import git
import pprint

class UnknownBranchException(Exception) :
	pass

class UnknownGitProblem(Exception) :
	pass

def getcommit(branch) :
	p = subprocess.Popen(['git', 'log', '-1', branch], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	out, err = p.communicate()
	status = p.wait()
	if status != 0 :
		raise UnknownBranchException
	line1 = out.split('\n')[0]
	if not line1.startswith('commit ') :
		raise UnknownGitProblem

	return line1[7:]

INIT = 3
LOCAL = 1
UNSYNC = 2
OK = 0
UNCOM = 4

NAMES = {
	INIT : "initial",
	LOCAL : "local",
	UNSYNC : "unsynced",
	OK : "ok",
	UNCOM : "uncom"
}

MAX_NAME = max([len(n) for n in NAMES.values()])

def analyze(path) :
	os.chdir(path)

	repo = git.repo.Repo('.')

	status = {}

	def add_status(st, msg) :
		status.setdefault(st, list())
		status[st] = msg

	# TODO check for untracked files

	try :
		try :
			local_master = getcommit('master')
		except :
			add_status(INIT, 'has no master')
			raise
		try :
			origin_master = getcommit('origin/master')
		except UnknownBranchException :
			add_status(LOCAL, 'has no origin/master')
			raise

		if local_master == origin_master :
			add_status(OK, 'is not ahead')
		else :
			add_status(UNSYNC, 'unpushed')

		if repo.is_dirty :
			add_status(UNCOM, 'dirty')
	except :
		return status

	return status

def walk_dir(path) :
	dirs = os.listdir(path)
	dirs.sort()
	
	results = []

	def cm(a, b) :
		return int.__cmp__(max(a[1].keys()), max(b[1].keys()))

	longest_path = 0

	for sp in dirs :
		p = os.path.join(path, sp)
		if os.path.isdir(p) and os.path.exists(os.path.join(p, '.git')) :
			results.append((p, analyze(p)))
			longest_path = max(longest_path, len(p))
	
	results.sort(cmp=cm)

	for path, analysis in results :
		keyword = NAMES[max(analysis.keys())]
		keyword += ' '*(MAX_NAME - len(keyword))
		path += ' '*(longest_path - len(path))
		print '[%s] %s %s' % (keyword, path, ' / '.join(analysis.values()))

if __name__ == '__main__' :
	try :
		p = os.path.abspath(sys.argv[1])
	except :
		sys.stderr.write('usage: gitwrench [path]')
		sys.exit(1)

	walk_dir(p)
